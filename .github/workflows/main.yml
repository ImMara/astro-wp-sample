name: Build and Deploy

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build and deploy'
        required: true
        default: 'master'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'

      - name: Install dependencies
        run: npm ci

      - name: Set API URLs as environment variables
        run: |
          echo "WC_API_URL=${{ secrets.WC_API_URL }}" >> $GITHUB_ENV
          echo "WORDPRESS_API_URL=${{ secrets.WORDPRESS_API_URL }}" >> $GITHUB_ENV        

      - name: Build AstroJS project
        run: npm run build

      - name: FTP Deploy
        uses: SamKirkland/FTP-Deploy-Action@4.0.0
        with:
          server: ${{ secrets.SERVER }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.PASSWORD }}
          local-dir: ./dist/
          server-dir: /astropress/

  cleanup:
    needs: build-and-deploy
    runs-on: ubuntu-latest

    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'

      - name: Install required dependencies
        run: npm install -g @actions/github-script

      - name: Remove old workflow runs
        run: |
          const { Octokit } = require('@octokit/rest');
          const octokit = new Octokit({
            auth: process.env.GITHUB_TOKEN
          });
          
          async function removeOldRuns() {
            const owner = process.env.GITHUB_REPOSITORY_OWNER;
            const repo = process.env.GITHUB_REPOSITORY;
            const workflowName = 'Build and Deploy';
            const maxRunsToKeep = 3;
          
            const response = await octokit.rest.actions.listWorkflowRuns({
              owner,
              repo,
              workflow_name: workflowName,
              per_page: 100
            });
          
            const sortedRuns = response.data.workflow_runs
              .filter(run => run.id !== Number(process.env.GITHUB_RUN_ID))
              .sort((a, b) => b.created_at.localeCompare(a.created_at));
          
            const runsToDelete = sortedRuns.slice(maxRunsToKeep);
          
            for (const run of runsToDelete) {
              await octokit.rest.actions.deleteWorkflowRun({
                owner,
                repo,
                run_id: run.id
              });
            }
          }
          
          removeOldRuns();
